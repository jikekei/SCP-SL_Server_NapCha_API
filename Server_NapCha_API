namespace Server_NapCha_ui_API
{

    public class Server_NapCha_API
    {
        //一个简单的基于HintServiceMeow的提示服务API和基于Exiled的API

        public HintServiceMeow.Core.Models.Hints.Hint 提示服务(Player 玩家, int 大小 = 25, int 高度 = 100, string 内容 = "Server_NapCha_ui_API_FileName_null_text", HintAlignment 位置 = HintAlignment.Left)
        {
            if (玩家 == null)
            {
                //throw new ArgumentNullException(nameof(玩家));
                Log.Error("Server_NapCha_ui_API_FileName 提示服务 玩家为空");
                return null;
            }
            HintServiceMeow.Core.Models.Hints.Hint hint = new HintServiceMeow.Core.Models.Hints.Hint();
            hint.Text = 内容;
            hint.FontSize = 大小;
            hint.YCoordinate = 高度;
            hint.Alignment = 位置;
            PlayerDisplay playerDisplay = PlayerDisplay.Get(玩家);
            playerDisplay.AddHint(hint);

            return hint;
        }

        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 提示服务0(Player 玩家, int 大小 = 25, int 时间 = 5, int 高度 = 100, string 内容 = "Server_NapCha_ui_API_FileName_null_text", HintAlignment 位置 = HintAlignment.Left)
        {
            if (玩家 == null)
            {
                //throw new ArgumentNullException(nameof(玩家));
                Log.Error("Server_NapCha_ui_API_FileName 提示服务 玩家为空");
            }
            HintServiceMeow.Core.Models.Hints.Hint hint = new HintServiceMeow.Core.Models.Hints.Hint();
            hint.Text = 内容;
            hint.FontSize = 大小;
            hint.YCoordinate = 高度;
            hint.Alignment = 位置;
            PlayerDisplay playerDisplay = PlayerDisplay.Get(玩家);
            playerDisplay.AddHint(hint);

            Timing.CallDelayed(时间, () => // Execute the provided method 5 seconds late.
            {
                playerDisplay.RemoveHint(hint);
            });
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public static Dictionary<Player, Timer> lastCancelTimer0 = new Dictionary<Player, Timer>();

        //yiming_hint_api
        // 提示位置：中上方
        // 提示字体大小：25

        //使用方法：提示服务1（方法，传入player，提示内容，提示时间（单位：秒）

        // 返回值：返回一个AbstractHint对象，可以通过这个对象来更新提示内容、设置提示位置、设置提示字体大小等。

        public HintServiceMeow.Core.Models.Hints.AbstractHint 提示服务1(Player player, string text, int 时间 = 5)
        {
            PlayerDisplay playerDisplay = PlayerDisplay.Get(player);
            HintServiceMeow.Core.Models.Hints.AbstractHint hint = playerDisplay.GetHint("your_hint_id");
            Timer lastCancelTimer = null; // 初始化为 null
            if (lastCancelTimer0.ContainsKey(player))
            {
                lastCancelTimer = lastCancelTimer0[player];
            }
            // 如果上一个提示已存在，先取消其定时器
            if (lastCancelTimer != null)
            {
                lastCancelTimer.Dispose();
            }
            if (hint != null)
            {
                hint.Text = text;
            }
            else
            {
                HintServiceMeow.Core.Models.Hints.Hint hint0 = new HintServiceMeow.Core.Models.Hints.Hint();
                hint0.Text = text;
                hint0.XCoordinate = 0;
                hint0.FontSize = 25;
                hint0.YCoordinate = 249;
                hint0.Id = "your_hint_id";
                hint0.Alignment = HintAlignment.Center;
                playerDisplay.AddHint(hint0);
            }

            lastCancelTimer = new Timer((state) =>
            {
                playerDisplay.RemoveHint(hint); // 使用实际的Guid替换yourGuid
            }, null, 时间 * 1000, Timeout.Infinite); // 转换为毫秒

            if (!lastCancelTimer0.ContainsKey(player))
            {
                lastCancelTimer0.Add(player, lastCancelTimer);
            }

            return hint;
        }

        //yiming_hint_api
        // 提示位置：中下方
        // 提示字体大小：25

        //使用方法：提示服务2（方法，传入player，提示内容，提示时间（单位：秒）

        // 返回值：返回一个AbstractHint对象，可以通过这个对象来更新提示内容、设置提示位置、设置提示字体大小等。
        public static Dictionary<Player, Timer> lastCancelTimer1 = new Dictionary<Player, Timer>();
        public HintServiceMeow.Core.Models.Hints.AbstractHint 提示服务2(Player player, string text, int 时间 = 5, int 字体大小 = 32)
        {
            PlayerDisplay playerDisplay = PlayerDisplay.Get(player);
            HintServiceMeow.Core.Models.Hints.AbstractHint hint = playerDisplay.GetHint("your_hint_id");
            Timer lastCancelTimer = null; // 初始化为 null
            if (lastCancelTimer1.ContainsKey(player))
            {
                lastCancelTimer = lastCancelTimer0[player];
            }
            // 如果上一个提示已存在，先取消其定时器
            if (lastCancelTimer != null)
            {
                lastCancelTimer.Dispose();
            }
            if (hint != null)
            {
                hint.Text = text;
            }
            else
            {
                HintServiceMeow.Core.Models.Hints.Hint hint0 = new HintServiceMeow.Core.Models.Hints.Hint();
                hint0.Text = text;
                hint0.XCoordinate = 0;
                hint0.FontSize = 字体大小;
                hint0.YCoordinate = 700;
                hint0.Id = "your_hint_id";
                hint0.Alignment = HintAlignment.Center;
                playerDisplay.AddHint(hint0);
            }

            lastCancelTimer = new Timer((state) =>
            {
                playerDisplay.RemoveHint(hint); // 使用实际的Guid替换yourGuid
            }, null, 时间 * 1000, Timeout.Infinite); // 转换为毫秒

            if (!lastCancelTimer1.ContainsKey(player))
            {
                lastCancelTimer1.Add(player, lastCancelTimer);
            }

            return hint;
        }


        //疑名制造的宇宙无敌，超级牛逼666的API

        public HintServiceMeow.Core.Models.Hints.Hint 更新提示(Player 玩家, HintServiceMeow.Core.Models.Hints.Hint existingHint = null, string newText = "Server_NapCha_ui_API_FileName_null_text")
        {
            if (existingHint != null)
            {
                // 更新提示文本
                existingHint.Text = newText;
                var s1 = existingHint;
                return s1;
            }
            else
            {
                // 如果没有找到现有提示，可以选择抛出异常或记录日志
                Log.Error("Server_NapCha_ui_API_FileName 提示不存在，无法更新");
                return null;
            }
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 设置阵营(Player 玩家, PlayerRoles.Team 阵营 = PlayerRoles.Team.Dead)
        {
            if (玩家 == null)
            {
                Log.Error("Server_NapCha_ui_API_FileName 设置阵营 玩家为空");
                return;
            }
            if (阵营 == PlayerRoles.Team.SCPs)
            {
                if (!SCPs.Contains(玩家))
                    SCPs.Add(玩家);
                else
                    return;
            }
            else if (阵营 == PlayerRoles.Team.FoundationForces)
            {
                if (!ntf.Contains(玩家))
                    ntf.Add(玩家);
                else
                    return;
            }
            else if (阵营 == PlayerRoles.Team.ChaosInsurgency)
            {
                if (!cs.Contains(玩家))
                    cs.Add(玩家);
                else
                    return;
            }
            else if (阵营 == PlayerRoles.Team.OtherAlive)
            {
                if (!zl.Contains(玩家))
                    zl.Add(玩家);
                else
                    return;
            }
            else if (阵营 == PlayerRoles.Team.Dead)
            {
                if (!无伤害.Contains(玩家))
                    无伤害.Add(玩家);
                else
                    return;
            }

        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 清空阵营(Player 玩家)
        {
            if (SCPs.Contains(玩家))
            {
                SCPs.Remove(玩家);
            }
            if (ntf.Contains(玩家))
            {
                ntf.Remove(玩家);
            }
            if (cs.Contains(玩家))
            {
                cs.Remove(玩家);
            }
            if (zl.Contains(玩家))
            {
                zl.Remove(玩家);
            }
            if (无伤害.Contains(玩家))
            {
                无伤害.Remove(玩家);
            }
        }        //疑名制造的宇宙无敌，超级牛逼666的API


        public System.TimeSpan 获取回合时间()
        {
            return Round.ElapsedTime;
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 设置血量(Player ev = null, int 血量 = 100)
        {
            if (ev == null)
            {
                Log.Error("Server_NapCha_ui_API_FileName 设置血量 玩家为空");
                return;
            }

            Timing.CallDelayed(0.5f, () => ev.MaxHealth = 血量);
            Timing.CallDelayed(0.5f, () => ev.Health = 血量);
        }
        public int 获取回合人数()
        {
            return Player.List.Count;
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public int 获取观察者人数()
        {
            int s1 = 0;
            foreach (Player player in Player.List)
            {
                if (player.Role.Type == PlayerRoles.RoleTypeId.Spectator)
                {
                    s1++;
                }
            }
            return s1;
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 添加特殊角色列表(Player ev)
        {
            if (特殊角色列表.Contains(ev))
            {
                return;
            }
            特殊角色列表.Add(ev);
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public void 移除特殊角色列表(Player ev)
        {
            if (特殊角色列表.Contains(ev))
            {
                特殊角色列表.Remove(ev);
            }
        }
        //疑名制造的宇宙无敌，超级牛逼666的API

        public bool 检查角色是否在特殊角色列表中(Player ev)
        {
            if (特殊角色列表.Contains(ev))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public float SCPs173()
        {
            float s173 = 0; // 或者根据需要给定合适的初始值
            foreach (Player player in Player.List)
            {
                if (player.Role.Type == PlayerRoles.RoleTypeId.Scp173)
                {
                    s173 = player.Health;
                    return s173; // 直接返回Scp173的血量
                }
            }
            return 0;
        }
        public void SCP恢复满盾(Player ev)
        {
            if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp173)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp939)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp049)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp096)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp106)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp3114)
            {

            }
            else if (ev.Role.Type == PlayerRoles.RoleTypeId.Scp0492)
            {

            }
        }


        public static List<Player> SCPs = new List<Player>();
        public static List<Player> ntf = new List<Player>();
        public static List<Player> cs = new List<Player>();
        public static List<Player> zl = new List<Player>();
        public static List<Player> 无伤害 = new List<Player>();
        public static List<Player> 特殊角色列表 = new List<Player>();

    }
}
